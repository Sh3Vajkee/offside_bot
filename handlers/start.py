from textwrap import dedent

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext as FSM
from aiogram.types import CallbackQuery as CQ
from aiogram.types import Message as Mes

from db.queries.global_queries import check_and_add_user, get_user_info
from keyboards.main_kbs import main_kb, start_kb, sub_kb
from utils.const import channel_username

flags = {"throttling_key": "default"}
router = Router()


@router.message(Command("start"), flags=flags)
async def start_cmd(m: Mes, state: FSM, ssn, bot: Bot):
    await state.clear()

    if m.from_user.username:
        username = f"@{m.from_user.username}"
    else:
        username = m.from_user.full_name

    await check_and_add_user(ssn, m.from_user.id, username)
    txt = """
    üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OFFSide</b>

    ‚öΩÔ∏è –ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–æ–≤ –∏–∑ –º–µ–¥–∏–∞—Ñ—É—Ç–±–æ–ª–∞ –∏ –∏–≥—Ä–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã.

    üèÜ –£ –Ω–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ä–µ–¥–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –∏–≥—Ä–æ–∫–æ–≤ –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã! –ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø–æ–±–µ–∂–¥–∞–π –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö, —á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ –æ–±–æ–π—Ç–∏ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π.

    –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ: 
    ¬´‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>¬ª

    –ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ, —Ç–æ –Ω–∞–∂–∏–º–∞–π
    ¬´üéÆ <b>–ù–∞—á–∞—Ç—å –∏–≥—Ä—É</b>¬ª

    <i>–í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏–≥—Ä—ã —è–≤–ª—è—é—Ç—Å—è –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–º–∏, –ª—é–±—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ‚Äî —Å–ª—É—á–∞–π–Ω—ã.</i>
    """

    await m.answer(dedent(txt), reply_markup=start_kb)


@router.callback_query(F.data == "backtostart", flags=flags)
async def back_to_start_cmd(c: CQ):
    txt = """
    üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OFFSide</b>

    ‚öΩÔ∏è –ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–æ–≤ –∏–∑ –º–µ–¥–∏–∞—Ñ—É—Ç–±–æ–ª–∞ –∏ –∏–≥—Ä–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã.

    üèÜ –£ –Ω–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ä–µ–¥–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –∏–≥—Ä–æ–∫–æ–≤ –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã! –ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø–æ–±–µ–∂–¥–∞–π –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö, —á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ –æ–±–æ–π—Ç–∏ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π.

    –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ: 
    ¬´‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>¬ª

    –ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ, —Ç–æ –Ω–∞–∂–∏–º–∞–π
    ¬´üéÆ <b>–ù–∞—á–∞—Ç—å –∏–≥—Ä—É</b>¬ª

    <i>–í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏–≥—Ä—ã —è–≤–ª—è—é—Ç—Å—è –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–º–∏, –ª—é–±—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ‚Äî —Å–ª—É—á–∞–π–Ω—ã.</i>
    """
    await c.message.edit_text(dedent(txt), reply_markup=start_kb)


@router.callback_query(F.data == "startplay", flags=flags)
async def start_play_cmd(c: CQ, ssn, bot: Bot):

    sub = await bot.get_chat_member(channel_username, c.from_user.id)

    await c.message.delete()

    if sub.status == "left":
        txt = "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ 1Ô∏è‚É£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @offsidecard"
        await c.message.answer(txt, reply_markup=sub_kb)

    else:
        user = await get_user_info(ssn, c.from_user.id)
        txt = f"""
        –¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:

        üÉè –°–æ–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {user.card_quants}
        üèÜ –†–µ–π—Ç–∏–Ω–≥ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: {user.rating}

        ‚öΩÔ∏è –†–µ–π—Ç–∏–Ω–≥ –≤ –∏–≥—Ä–µ –ü–µ–Ω–∞–ª—å—Ç–∏: {user.penalty_rating}
        """
        await c.message.answer(dedent(txt), reply_markup=main_kb)


@router.callback_query(F.data == "cancel_cb")
async def cancel_cb_cmd(c: CQ, state: FSM):
    await state.clear()
    await c.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await c.message.delete()


@router.callback_query(F.data == "closewindow")
async def close_window_cmd(c: CQ):
    await c.message.delete()
