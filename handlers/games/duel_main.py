import asyncio
import logging
from textwrap import dedent

from aiogram import F, Router
from aiogram.types import CallbackQuery as CQ

from db.queries.craft_queries import craft_card, get_user_duplicates
from db.queries.duel_queries import (duel_user_ready, get_active_duel_lobbies,
                                     get_duel_cards, update_owner_msg_id,
                                     update_target_msg_id)
from keyboards.cards_kbs import accept_new_card_btn
from keyboards.duel_kbs import duel_kb, lobbies_kb, opp_duel_kb, rooms_kb
from keyboards.main_kbs import close_window_btn
from middlewares.actions import ActionMiddleware
from utils.duel_misc import (check_duel_timer, create_lobbies_btns,
                             format_duel_cards, format_duel_lobby_text,
                             resent_lobby_info, send_duel_finish_messages)
from utils.format_texts import format_craft_text, format_new_free_card_text

flags = {"throttling_key": "default"}
router = Router()
router.callback_query.middleware(ActionMiddleware())


@router.callback_query(F.data == "duel", flags=flags)
async def duel_cmd(c: CQ, action_queue):
    txt = """
    ‚öîÔ∏è –í –î—É—ç–ª–∏ –∫–∞—Ä—Ç —Ç—ã —Å—Ç–∞–≤–∏—à—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã –Ω–∞ –∫–æ–Ω –ø—Ä–æ—Ç–∏–≤ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.
    –û–¥–∏–Ω –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –∫–æ–Ω 5 –∫–∞—Ä—Ç –ª—é–±–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏.

    –ó–∞ –ø–æ–±–µ–¥—É —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –∫–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –ø–æ—Å—Ç–∞–≤–∏–ª –Ω–∞ –¥—É—ç–ª—å.
    –ó–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ - —Ç–µ—Ä—è–µ—à—å —Å–≤–æ–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–∞–≤–∏–ª –Ω–∞ –¥—É—ç–ª—å.

    –¢—ã –º–æ–∂–µ—à—å –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –ª–æ–±–±–∏, –ª–∏–±–æ –≤–æ–π—Ç–∏ –≤ –ª–æ–±–±–∏ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    """
    await c.message.edit_text(dedent(txt), reply_markup=duel_kb)

    try:
        del action_queue[str(c.from_user.id)]
    except Exception as error:
        logging.info(f"Action delete error\n{error}")


@router.callback_query(F.data == "duellobbies", flags=flags)
async def duel_rooms_cmd(c: CQ, action_queue):
    txt = """
    üèπ –í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–º–Ω–∞—Ç—É
    –ö–æ–º–Ω–∞—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—á–∫–æ–≤ –Ω–∞ –¥—É—ç–ª–∏
    –û—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É

    üé™ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç:
    """
    await c.message.edit_text(dedent(txt), reply_markup=rooms_kb)

    try:
        del action_queue[str(c.from_user.id)]
    except Exception as error:
        logging.info(f"Action delete error\n{error}")


@router.callback_query(F.data.startswith("duelroom_"), flags=flags)
async def duel_rooms_cmd(c: CQ, action_queue, ssn):
    data = c.data.split("_")
    duels = await get_active_duel_lobbies(ssn, int(data[1]), int(data[2]))
    if len(duels) == 0:
        await c.answer("–í —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏")
    else:
        txt = "üé™ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏:"
        btns = await create_lobbies_btns(duels)
        await c.message.edit_text(dedent(txt), reply_markup=lobbies_kb(btns))

    try:
        del action_queue[str(c.from_user.id)]
    except Exception as error:
        logging.info(f"Action delete error\n{error}")


@router.callback_query(F.data.startswith("checkbets_"), flags=flags)
async def duel_rooms_cmd(c: CQ, action_queue, ssn):
    duel_id = int(c.data.split("_")[-1])
    res = await get_duel_cards(ssn, c.from_user.id, duel_id)
    if res == "not_available":
        txt = "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        await c.message.edit_text(txt, reply_markup=duel_kb)
    else:
        txt = await format_duel_cards(res[0], res[1], res[2])
        await c.message.answer(txt, reply_markup=close_window_btn)
        await c.answer()

    try:
        del action_queue[str(c.from_user.id)]
    except Exception as error:
        logging.info(f"Action delete error\n{error}")


@router.callback_query(F.data.startswith("rdyduel_"), flags=flags)
async def duel_ready_cmd(c: CQ, action_queue, ssn, bot, db):
    duel_id = int(c.data.split("_")[-1])
    res = await duel_user_ready(ssn, c.from_user.id, duel_id)
    if res == "not_available":
        txt = "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        await c.message.edit_text(txt, reply_markup=duel_kb)
    elif res == "already_ready":
        await c.answer("–í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å!")
    elif res == "target_cards_not_found":
        await c.answer(
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ –¥–æ–±–∞–≤–∏–ª —Ö–æ—Ç—è–±—ã –æ–¥–Ω—É –∫–∞—Ä—Ç—É")
    elif res == "your_cards_not_found":
        await c.answer(
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ö–æ—Ç—è–±—ã –æ–¥–Ω—É –∫–∞—Ä—Ç—É")
    else:
        if res[1] == "error":
            txt = "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            await c.message.edit_text(txt, reply_markup=duel_kb)
        elif res[1] == "not_ready":
            txts = await format_duel_lobby_text(res[0])
            if res[0].owner == c.from_user.id:
                await c.message.edit_reply_markup(
                    reply_markup=opp_duel_kb(duel_id, "owner", 1))
                msg_id = await resent_lobby_info(
                    bot, res[0], "target", txts[0], opp_duel_kb(duel_id, "target", 1))
                await update_target_msg_id(ssn, duel_id, msg_id)
            else:
                await c.message.edit_reply_markup(
                    reply_markup=opp_duel_kb(duel_id, "target", 1))
                msg_id = await resent_lobby_info(
                    bot, res[0], "owner", txts[0], opp_duel_kb(duel_id, "owner", 1))
                await update_owner_msg_id(ssn, duel_id, msg_id)
                asyncio.create_task(check_duel_timer(
                    db, bot, duel_id, "owner", res[0].owner, res[0].owner_ts, 60))
        else:
            logging.info(f"Duel {duel_id} finished. Winner {res[0].winner}")
            await send_duel_finish_messages(res[0], bot)

    try:
        del action_queue[str(c.from_user.id)]
    except Exception as error:
        logging.info(f"Action delete error\n{error}")
